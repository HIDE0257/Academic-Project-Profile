%% ASEN 3111 - Computational Assignment 3 - Main
%
% Goal: The purpose of this assignment is to understand the characteristics
% of each case of airfoils (thin, moderate thickness, thick, symmetric,
% moderately cambered, or cambered). This lab is also to validate the thin
% airfoil theory for symmetric and cambered airfoil, comparing with
% calculated lift coefficients. In addition, it makes us understand the
% concept of PLLT. 
%
% Author: Hideyuki Nakanishi
% SID: 110285397
% Date: Nov 06, 2022
 
clc
clear
close all
t0 = clock;
%% Q1 Computation of Lift Generated by Thick Symmetric Airfoil
% Use NACA0012
N_true = 2500;  % Number of panels for true value
m = 0;          % Maximum camber of chord
p = 0;          % Location of maximum camber of chord
t = 12;         % [%] Thickness of chord
c = 6;          % [ft] Chord length
V_inf = 100;    % [ft/s] Freestream velocity
alpha = 10;     % [deg] Angle of attack
 
% x_true, y_true contain the upper and lower boundary locations
% [x_true,y_true] = NACA_Airfoils(m,p,t,c,N_true);
% cl_true = Vortex_Panel(x_true,y_true,V_inf,alpha);
cl_true = 1.2001;   % Truth Cl value with N = 2500;
 
error = 0.1;    % Initialize error 
N_req = 2;      % Initialize N_req
% It will stop when error hits less than 1% and that should be N_req
while error > 0.01
    N_req = N_req + 1;
    [x_b,y_b] = NACA_Airfoils(m,p,t,c,N_req);
    cl = Vortex_Panel(x_b,y_b,V_inf,alpha);
    error = abs(cl - cl_true)/cl_true;
end
 
N_req = 2*N_req; % Take into account for both the top and bottom sides
% Print out the number of total panels required to achieve 1% of error of cl
fprintf('1) Computation of Lift Generated by Thick Symmetric Airfoil\n');
fprintf('Number of Panels with 1 Percent Error = %d\n', N_req);
fprintf('\n');

%% Q2 Study of the Effect of Airfoil Thickness on Lift
% Thin Airfoil Theory
LS_TAT = 2*pi^2/180;        % [/deg] Cl_TAT = 2π(/rad)
zerolift_TAT = 0;           % [deg] Zerolift angle of attack (any symmetric airfoil = 0)
alpha_range = linspace(-6,10,50);   % [deg] Range of angle of attack
N_req = N_req/2;            % Number of pannels used (Didived by 2 b/c the previous N_req is the panels for the top and bottom

% Get Cl corresponding to the angle of attack for three different symmetric airfoils 
for j = 1:length(alpha_range)
    % NACA0006
    [x_thin, y_thin] = NACA_Airfoils(0,0,6,c,N_req);
    cl_thin(j) = Vortex_Panel(x_thin,y_thin,V_inf,alpha_range(j));
    % NACA0012
    [x_moderate, y_moderate] = NACA_Airfoils(0,0,12,c,N_req);
    cl_moderate(j) = Vortex_Panel(x_moderate,y_moderate,V_inf,alpha_range(j));
    % NACA0024
    [x_thick, y_thick] = NACA_Airfoils(0,0,24,c,N_req);
    cl_thick(j) = Vortex_Panel(x_thick,y_thick,V_inf,alpha_range(j));
end

% Find lift slope and zerolift angle of attack for each 
p_thin = polyfit(alpha_range,cl_thin,1);
zerolift_thin = -p_thin(2)/p_thin(1);
 
p_moderate = polyfit(alpha_range,cl_moderate,1);
zerolift_mod = -p_moderate(2)/p_moderate(1);
 
p_thick = polyfit(alpha_range,cl_thick,1);
zerolift_thick = -p_thick(2)/p_thick(1);

% Combine these above into one vector
LS_Q2 = [p_thin(1), p_moderate(1), p_thick(1), LS_TAT];
ZL_Q2 = [zerolift_thin, zerolift_mod, zerolift_thick, zerolift_TAT];

% Put all the data into a table 
% fprintf('2) Study of the Effect of Airfoil Thickness on Lift\n');

colName2 = [ "NACA0006" "NACA0012" "NACA0024" "Thin Airfoil Theory"];
rowName2 = ["Lift Slope (/deg)" "Zerolift Angle of Attack (˚)"];
Q2_table = array2table([LS_Q2;ZL_Q2],"RowNames", rowName2, "VariableNames", colName2);
disp(Q2_table)
 
% Plot: Lift slopes of different symmetric airfoils over angle of attack 
figure(1)
plot(alpha_range,cl_thin); hold on
plot(zerolift_thin,0,'r*')
plot(alpha_range,cl_moderate)
plot(zerolift_mod,0,'b*')
plot(alpha_range,cl_thick)
plot(zerolift_thick,0,'g*')
plot(alpha_range,LS_TAT.*alpha_range, '--');
plot(0,0,'ko')
title('Lift Slopes of Different Symmetric Airfoils over Angle of Attack')
ylabel('Lift Coefficient (cl)')
xlabel('Angle of Attack (˚)')
legend('NACA0006','NACA0006 \alpha_{L=0}','NACA0012','NACA0012 \alpha_{L=0}','NACA0024','NACA0024 \alpha_{L=0}','Thin Airfoil Theory', 'Thin Airfoil Theory \alpha_{L=0}');
axis([-6 10 -1.0 2.0])
grid on
hold off
 
%% Q3 Study of Effect of Airfoil Camber on Lift
% Get Cl corresponding to angle of attack 
for k = 1:length(alpha_range)
    % NACA0012 Symmetric Airfoil
    [x_sym, y_sym] = NACA_Airfoils(0,0,12,c,N_req);
    cl_sym(k) = Vortex_Panel(x_sym,y_sym,V_inf,alpha_range(k));
    % NACA2412
    [x_mod_cam, y_mod_cam] = NACA_Airfoils(2,4,12,c,N_req);
    cl_mod_cam(k) = Vortex_Panel(x_mod_cam,y_mod_cam,V_inf,alpha_range(k));
    % NACA4412
    [x_cam, y_cam] = NACA_Airfoils(4,4,12,c,N_req);
    cl_cam(k) = Vortex_Panel(x_cam,y_cam,V_inf,alpha_range(k));
end

% Find lift slope and zerolift angle of attack for each 
p_sym = polyfit(alpha_range,cl_sym,1);
zerolift_sym = -p_sym(2)/p_sym(1);
 
p_mod_cam = polyfit(alpha_range,cl_mod_cam,1);
zerolift_mod_cam = -p_mod_cam(2)/p_mod_cam(1);
 
p_cam = polyfit(alpha_range,cl_cam,1);
zerolift_cam = -p_cam(2)/p_cam(1);

M = [0,2,4];    % Maximum cambered line for NACA0012, NACA2412, NACA4412
P = [0,4,4];    % Location of maximum cambered line for NACA0012, NACA2412, NACA4412
% Compute zerolift angle of attack for each through this function 
zerolift_TAT_cam = Thin_Airfoil_Theory(M,P); % [deg] Zerolift angle of attack 
% Put all the data into a table 
LS_Q3 = [p_sym(1), LS_TAT, p_mod_cam(1), LS_TAT, p_cam(1), LS_TAT];
ZL_Q3 = [zerolift_sym, zerolift_TAT_cam(1), zerolift_mod_cam, zerolift_TAT_cam(2), zerolift_cam, zerolift_TAT_cam(3)];

% fprintf('3) Study of the Effect of Airfoil Camber on Lift\n');
colName3 = ["NACA0012" "T.A.T0012" "NACA2412" "T.A.T2412" "NACA4412" "T.A.T4412"];
rowName3 = ["Lift Slope (/deg)" "Zerolift Angle of Attack (˚)"];
Q3_table = array2table([LS_Q3;ZL_Q3],"RowNames", rowName3, "VariableNames", colName3);
disp(Q3_table)

% Plot: Lift slopes over angle of attack 
figure(2)
% NACA0012
hold on
subplot(3,1,1)
plot(alpha_range,cl_sym); hold on
plot(zerolift_sym,0,'r*'); hold on
plot(alpha_range,LS_TAT.*alpha_range + p_sym(2), '--'); hold on
plot(zerolift_TAT_cam(1),0, 'bo'); hold on
title('Lift Slopes of NACA0012 over Angle of Attack')
ylabel('Lift Coefficient (cl)')
xlabel('Angle of Attack (˚)')
axis([-6 10 -1.0 2.0])
legend('NACA0012','NACA0012 \alpha_{L=0}','Thin Airfoil Theory','Thin Airfoil Theory \alpha_{L=0}');
grid on 
hold off
% NACA2412
subplot(3,1,2)
plot(alpha_range,cl_mod_cam); hold on
plot(zerolift_mod_cam,0,'r*')
plot(alpha_range,LS_TAT.*alpha_range + p_mod_cam(2), '--');
plot(zerolift_TAT_cam(2),0,'bo');
title('Lift Slopes of NACA2412 over Angle of Attack')
ylabel('Lift Coefficient (cl)')
xlabel('Angle of Attack (˚)')
legend('NACA2412','NACA2412 \alpha_{L=0}','Thin Airfoil Theory','Thin Airfoil Theory \alpha_{L=0}');
axis([-6 10 -1.0 2.0])
grid on 
% NACA4412
subplot(3,1,3)
plot(alpha_range,cl_cam); hold on
plot(zerolift_cam,0,'r*')
plot(alpha_range,LS_TAT.*alpha_range + p_cam(2),'--');
plot(zerolift_TAT_cam(3),0, 'bo');
title('Lift Slopes of NACA4412 over Angle of Attack')
ylabel('Lift Coefficient (cl)')
xlabel('Angle of Attack (˚)')
legend('NACA4412','NACA412 \alpha_{L=0}','Thin Airfoil Theory','Thin Airfoil Theory \alpha_{L=0}');
axis([-6 10 -1.0 2.0])
grid on
hold off
 
%% Q4 & Q5 Prandtl Lifting Line Code & Analysis of Approximate Cessna 150 Wing Performance
rho = 17.56e-4;         % [slug/ft^3] Air density at an altitude of 10,000ft
V = 82*1.688;           % [ft/s] Cruise Speed at 10,000 ft altitude (V = 82 knots)
q = 0.5*rho*V^2;        % [Pa] Dynamic pressure at 10,000ft
b = 33 + 4/12;          % [ft] Wingspan (33'4")
a0_t = p_moderate(1);   % [/deg] Cross-sectional lift slop at the tips (NACA0012)
a0_r = p_mod_cam(1);    % [/deg] Cross-sectional lift slop at the root (NACA2412)
c_t = 3 + 8.5/12;       % [ft] Chord at the tips (5'4")
c_r = 5 + 4/12;         % [ft] Chord at the root (3'8.5")
aero_t = zerolift_mod;  % [deg] Zero-lift angle of attack at the tips (NACA0012)
aero_r = zerolift_mod_cam;  % [deg] Zero-lift angle of attack at the root (NACA2412)
geo_t = 0;              % [deg] Geometric angle of attack at the tips (NACA0012)
geo_r = 1;              % [deg] Geometric angle of attack at the root (NACA2412)
s = b*(c_t + c_r)/2;    % [ft^2] Surface area of wings
% N_true = 200;           % Number of odd terms for exact valuein the series expansion
 
% [e_true,c_L_true,c_Di_true] = PLLT(b,a0_t,a0_r,c_t,c_r,aero_t,aero_r,geo_t,geo_r,N_true);
e_true = 0.8041;        % Exact efficiency factor with N_true = 200;
c_L_true = 0.1586;      % Exact lift coefficient with N_true = 200;
c_Di_true = 6.7539e-4;  % Exact induced drag coefficient with N_true = 200;
L_true = c_L_true*q*s;  % [lb] Exact lift value
Di_true = c_Di_true*q*s;% [lb] Exacr induced drag value

error10_L = 0.5;    % Initialize the error for 10% for lift 
error10_D = 0.5;    % Initialize the error for 10% for drag
error1_L = 0.5;     % Initialize the error for 1% for lift
error1_D = 0.5;     % Initialize the error for 1% for drag
error01_L = 0.5;    % Initialize the error for 0.1% for lift
error01_D = 0.5;    % Initialize the error for 0.1% for drag
N10_L = 1;          % Initilize the number of pannels for 10% for lift
N10_D = 1;          % Initilize the number of pannels for 10% for drag
N1_L = 1;           % Initilize the number of pannels for 1% for lift
N1_D = 1;           % Initilize the number of pannels for 1% for drag
N01_L = 1;          % Initilize the number of pannels for 0.1% for lift
N01_D = 1;          % Initilize the number of pannels for 0.1% for drag

% Finding the number of pannels for 10% error
while error10_L > 0.1
    N10_L = N10_L + 1;
    [~,c_L10,~] = PLLT(b,a0_t,a0_r,c_t,c_r,aero_t,aero_r,geo_t,geo_r,N10_L);
    L10 = c_L10*q*s;
    error10_L = abs(L10 - L_true)/L_true;
end
while error10_D > 0.1
    N10_D = N10_D + 1;
    [~,~,c_D10] = PLLT(b,a0_t,a0_r,c_t,c_r,aero_t,aero_r,geo_t,geo_r,N10_D);
    D10 = c_D10*q*s;
    error10_D = abs(D10 - Di_true)/Di_true;
end
% Compare N for lift and drag and pick larger one
if N10_L >= N10_D
    N10 = N10_L;
else
    N10 = N10_D;
end
% Finding the number of pannels for 1% error 
while error1_L > 0.01
    N1_L = N1_L + 1;
    [~,c_L1,~] = PLLT(b,a0_t,a0_r,c_t,c_r,aero_t,aero_r,geo_t,geo_r,N1_L);
    L1 = c_L1*q*s;
    error1_L = abs(L1 - L_true)/L_true;
end
while error1_D > 0.01
    N1_D = N1_D + 1;
    [~,~,c_D1] = PLLT(b,a0_t,a0_r,c_t,c_r,aero_t,aero_r,geo_t,geo_r,N1_D);
    D1 = c_D1*q*s;
    error1_D = abs(D1 - Di_true)/Di_true;
end
% Compare N for lift and drag and pick larger one
if N1_L >= N1_D
    N1 = N1_L;
else
    N1 = N1_D;
end

% Finding the number of pannels for a 0.1% error 
while error01_L > 0.001
    N01_L = N01_L + 1;
    [~,c_L01,~] = PLLT(b,a0_t,a0_r,c_t,c_r,aero_t,aero_r,geo_t,geo_r,N01_L);
    L01 = c_L01*q*s;
    error01_L = abs(L01 - L_true)/L_true;
end
while error01_D > 0.001
    N01_D = N01_D + 1;
    [~,~,c_D01] = PLLT(b,a0_t,a0_r,c_t,c_r,aero_t,aero_r,geo_t,geo_r,N01_D);
    D01 = c_D01*q*s;
    error01_D = abs(D01 - Di_true)/Di_true;
end
% Compare N for lift and drag and pick larger one
if N01_L >= N01_D
    N01 = N01_L;
else
    N01 = N01_D;
end


% Display the number of panels for each case 
fprintf('4) & 5) Analysis of Approximate Cessna 150 Wing Performance\n');
fprintf('Number of Pannels Required within 10 percent Error  = %d\n',N10);
fprintf('Number of Pannels Required within 1 percent Error   = %d\n',N1);
fprintf('Number of Pannels Required within 0.1 percent Error = %d\n',N01);
fprintf('\n');
 
%% Time Taken
time = etime(clock,t0);
fprintf('Time = %.1f s\n', time);
